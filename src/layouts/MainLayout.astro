---
import HeadCommon from '../components/HeadCommon.astro';
import HeadSEO from '../components/HeadSEO.astro';
import Header from '../components/Header/Header.astro';
import PageContent from '../components/PageContent/PageContent.astro';
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro';
import RightSidebar from '../components/RightSidebar/RightSidebar.astro';
import { getLanguageFromURL } from '../util';
import { normalizeLangTag } from '../i18n/bcp-normalize';
import { useTranslations } from '../i18n/util';

const { content = {}, hideRightSidebar = false } = Astro.props;
const isFallback = !!Astro.params.fallback;
const url = new URL(Astro.request.url);
const currentPage = url.pathname;
const currentFile = `src/pages${currentPage.replace(/\/$/, '')}.md`;
const githubEditUrl = `https://github.com/withastro/docs/blob/main/${currentFile}`;
const t = useTranslations(Astro);
const formatTitle = (content) => (content.title ? `${content.title} ðŸš€ ${t('site.title')}` : t('site.title'));
const lang = getLanguageFromURL(url.pathname);
const bcpLang = normalizeLangTag(lang);
const canonicalURL = new URL(Astro.canonicalURL);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');
---

<html dir={content.dir ?? 'ltr'} lang={bcpLang} class="initial">
	<head>
		<HeadCommon />
		<HeadSEO {content} {canonicalURL} />
		<title set:html={formatTitle(content)} />
		<style>
			body {
				width: 100%;
				display: grid;
				grid-template-rows: var(--theme-navbar-height) 1fr;
			}
			.layout {
				display: grid;
				grid-auto-flow: column;
				grid-template-columns:
					0
					minmax(0, var(--max-width))
					0;
			}
			.layout :global(> *) {
				width: 100%;
				height: 100%;
			}
			.grid-sidebar {
				height: calc(var(--cur-viewport-height) - var(--theme-navbar-height));
				position: sticky;
				top: 0;
				padding: 0;
			}
			#grid-left {
				position: fixed;
				background: var(--theme-bg-gradient);
				z-index: 10;
				display: none;
			}
			#grid-main {
				grid-column: 2;
				display: flex;
				flex-direction: column;
				height: 100%;
				min-width: 0;
			}
			#grid-right {
				display: none;
			}

			/* Allow showing left sidebar as an overlay, but only while viewport stays narrow */
			@media not screen and (min-width: 50em) {
				:global(.mobile-sidebar-toggle) {
					overflow: hidden;
				}
				:global(.mobile-sidebar-toggle #grid-left) {
					display: block;
					top: var(--theme-navbar-height);
					bottom: 0;
					height: initial;
				}
			}

			@media (min-width: 50em) {
				.layout {
					overflow: initial;
					grid-template-columns:
						20rem
						minmax(0, var(--max-width));
				}
				#grid-left {
					display: flex;
					padding-inline-start: var(--min-spacing-inline);
					padding-inline-end: 1rem;
					position: sticky;
					grid-column: 1;
					background: transparent;
				}
			}

			@media (min-width: 72em) {
				.layout {
					grid-template-columns:
						20rem
						1fr
						18rem;
					padding-left: 0;
					padding-right: 0;
				}
				#grid-right {
					grid-column: 3;
					display: flex;
				}
			}
		</style>
		<script is:inline>
			// This code was migrated/copied from ThemToggleBotton to make the
			// dark mode toggle instant, vs. hidden inside of a Preact useEffect() call.
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
					return 'dark';
				}
				return 'light';
			})();
			if (theme === 'light') {
				document.documentElement.classList.remove('theme-dark');
			} else {
				document.documentElement.classList.add('theme-dark');
			}
		</script>
	</head>

	<body>
		<Header {currentPage} />
		<main class="layout">
			<aside id="grid-left" class="grid-sidebar">
				<LeftSidebar {currentPage} />
			</aside>
			<aside id="grid-right" class="grid-sidebar">
				{!hideRightSidebar && <RightSidebar content={content} githubEditUrl={githubEditUrl} />}
			</aside>
			<div id="grid-main" lang={isFallback && 'en'}>
				<PageContent {content} {githubEditUrl} {currentPage} {isFallback}>
					<slot />
				</PageContent>
			</div>
		</main>
	</body>
</html>
