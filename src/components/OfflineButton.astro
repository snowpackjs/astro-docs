---
import 'simple-vanilla-notifications/defaults.css';
---

<button id="offline-control-button" aria-hidden="true" tabindex="-1">Install offline</button>

<style>
	#offline-control-button {
		opacity: 0;
		pointer-events: none;
		transition: opacity 1s, background-color 150ms, border-color 100ms;
		border: 1px solid transparent;
	}
	#offline-control-button[data-offline-supported] {
		opacity: 1;
		pointer-events: auto;
	}
	/* #offline-control-button.loading::after {
		content: '';
		width: 12px;
		height: 12px;
		background-color: white;
		border: 1px solid var(--theme-accent);
		border-radius: 0 10px 0 10px;
		animation: spin 2s infinite linear;
	}
	@keyframes spin {
		from {
			transform: rotateZ(0deg);
		}
		to {
			transform: rotateZ(360deg);
		}
	} */
	#offline-control-button:not(:disabled) {
		border-color: var(--theme-accent);
	}
	#offline-control-button:hover:not(:disabled) {
		background-color: var(--theme-accent);
	}
	#offline-control-button:disabled {
		color: var(--theme-text-light);
		background-color: var(--theme-dim-light);
	}
</style>

<script>
	import { createNotificationManager } from 'simple-vanilla-notifications';

	async function removeOffline() {
			console.log('Removing offline');

			// Unregister all registered serviceworkers
			const registrations = await navigator.serviceWorker.getRegistrations();

			registrations.forEach((registration) => registration.unregister());

			// Remove all cached assets
			const keys = await caches.keys();
			await Promise.all(
				keys.map((key) => {
					return caches.delete(key);
				})
			);
		}

	if (import.meta.env.DEV) removeOffline();
	else {

		const offlineButton = document.getElementById('offline-control-button')!;
		const manager = createNotificationManager({
			defaultAnimated: false,
		});
		const { createNotification } = manager;

		const shouldRemove = async () => (await navigator.serviceWorker.getRegistrations()).length > 0;

		if (await shouldRemove()) {
			// If the site is already set up to work offline, make the button remove offline support instead
			offlineButton.innerText = 'Remove offline';
		}

		let offlineSupported = false;
		// Need to check for serviceWorker and caches support
		// - no good registering a service worker if it can't
		// cache things offline
		if ('serviceWorker' in navigator && 'caches' in window) {
			offlineSupported = true;
			offlineButton.toggleAttribute('data-offline-supported', true);
			offlineButton.setAttribute('aria-hidden', 'false');
			offlineButton.setAttribute("tabindex", "0")
		}

		function isRegistered() {
			offlineButton.innerText = 'Remove offline';
			offlineButton.removeAttribute('disabled');
			offlineButton.classList.remove('loading');
		}

		offlineButton.addEventListener('click', async () => {
			if (!offlineSupported) return console.warn("Can't use offline!");

			if (await shouldRemove()) {
							const removingNotif = showNotif && createNotification('Removing offline support...');
				await removeOffline();
					offlineButton.innerText = 'Install offline';

			showNotif && removingNotif.dismiss();
			showNotif &&createNotification('Offline support removed.');
			} else {
				console.log('Setting up offline');

				const registeringNotif = createNotification('Setting up offline support...');

				offlineButton.toggleAttribute('disabled', true);
				offlineButton.classList.add('loading');

				const registration = await navigator.serviceWorker.register('/service-worker.js', {
					scope: '/',
				});

				registeringNotif.dismiss();

				if (registration.installing) {
					createNotification('Service worker installing');
				} else if (registration.waiting) {
					createNotification('Service worker installed & waiting');
					isRegistered();
				} else if (registration.active) {
					createNotification('Service worker active');
					isRegistered();
				}

			}
		});
	}
</script>
