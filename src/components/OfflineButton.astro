---
import { useTranslations } from '../i18n/util';
const t = useTranslations(Astro);

const scriptTranslations = {
	'offline.button.remove': t('offline.button.remove'),
	'offline.button.install': t('offline.button.install'),
	'offline.statusText.enabled': t('offline.statusText.enabled'),
	'offline.statusText.ready': t('offline.statusText.ready'),
	'offline.statusText.removing': t('offline.statusText.removing'),
	'offline.statusText.removed': t('offline.statusText.removed'),
	'offline.statusText.installing': t('offline.statusText.installing'),
	'offline.statusText.installed': t('offline.statusText.installed'),
};
---

<div id="offline-wrapper">
	<span id="offline-status-text" aria-hidden="true">{t('offline.statusText.disabled')}</span>
	<button id="offline-control-button" aria-hidden="true" tabindex="-1">
		{t('offline.button.install')}
	</button>
</div>
<style>
	#offline-wrapper {
		opacity: 0;
		pointer-events: none;
		transition: opacity 250ms;
		padding: 0.2rem 1rem;
	}
	#offline-wrapper[data-offline-supported] {
		opacity: 1;
		pointer-events: auto;
	}

	#offline-status-text {
		display: block;
		margin-bottom: 0.5rem;
	}

	#offline-control-button {
		background-color: transparent;
		transition: background-color 150ms, border-color 100ms;
		border: 1px solid transparent;
	}

	#offline-control-button:not(:disabled) {
		border-color: var(--theme-accent);
	}
	#offline-control-button:hover:not(:disabled) {
		background-color: var(--theme-accent);
	}
	#offline-control-button:disabled {
		color: var(--theme-text-light);
		background-color: var(--theme-dim-light);
	}

	@media (prefers-reduced-motion: no-preference) {
		#offline-status-text.loading::after {
			display: inline-block;
			margin-left: 10px;
			content: '';
			width: 12px;
			height: 12px;
			background-color: transparent;
			border: 1px solid var(--theme-accent);
			border-radius: 0 10px 0 10px;
			animation: spin 2s infinite linear;
		}
		@keyframes spin {
			from {
				transform: rotateZ(0deg);
			}
			to {
				transform: rotateZ(360deg);
			}
		}
	}
</style>

<script define:vars={{ scriptTranslations }}>
	// Slightly cursed way of making the translated strings available in js.
	// Doing this is a seperate script so that we can use typescript in the main one.
	window.offlinebuttonTranslations = scriptTranslations;
</script>

<script>
	// @ts-expect-error
	const translations = window.offlinebuttonTranslations as Record<string, string>;

	const offlineWrapper = document.getElementById('offline-wrapper') as HTMLDivElement;
	const offlineStatusText = document.getElementById('offline-status-text') as HTMLSpanElement;
	const offlineButton = document.getElementById('offline-control-button') as HTMLButtonElement;

	async function removeOffline() {
		console.log('Removing offline');

		// Unregister all registered serviceworkers
		const registrations = await navigator.serviceWorker.getRegistrations();

		registrations.forEach((registration) => registration.unregister());

		// Remove all cached assets
		const keys = await caches.keys();
		await Promise.all(
			keys.map((key) => {
				return caches.delete(key);
			})
		);
	}

	function downloadStuffOnSwReady() {
		// As soon as the serviceWorker is ready, download all the pages in the current language
		navigator.serviceWorker.ready.then((registration) => {
			// Download the current page
			registration.active?.postMessage({
				name: 'download page',
				path: location.pathname,
				from: 'window',
			});

			// Download all of the pages in the current language.
			// Get the current page locale from the path string
			const match = location.pathname.match(/^\/([a-zA-Z]{2}(?:-[a-zA-Z]{2})?)\//);

			// If a locale wasn't found in the path, default to English
			const currentLanguage = match ? match[1] || 'en' : 'en';

			registration.active?.postMessage({
				name: 'download language',
				lang: currentLanguage,
				from: 'window',
			});
		});
	}

	const isWorkerInstalled = async () =>
		(await navigator.serviceWorker.getRegistrations()).length > 0;

	function updateLoadingState(isLoading: boolean) {
		offlineStatusText.classList.toggle('loading', isLoading);
	}

	if (import.meta.env.DEV) removeOffline();
	else if ('serviceWorker' in navigator) {
		offlineWrapper.toggleAttribute('data-offline-supported', true);
		offlineStatusText.setAttribute('aria-hidden', 'false');
		offlineButton.setAttribute('aria-hidden', 'false');
		offlineButton.setAttribute('tabindex', '0');

		if (await isWorkerInstalled()) {
			// If the site is already set up to work offline, make the button remove offline support instead
			offlineButton.innerText = translations['offline.button.remove'];
			offlineStatusText.innerText = translations['offline.statusText.enabled'];
		}

		navigator.serviceWorker.addEventListener('controllerchange', downloadStuffOnSwReady);

		navigator.serviceWorker.addEventListener('message', async (event) => {
			if (typeof event.data !== 'object') return;
			if (!('name' in event.data)) return;

			switch (event.data.name) {
				case 'download started':
					updateLoadingState(true);
					break;
				case 'download finished':
					updateLoadingState(false);
					break;
				case 'offline ready':
					updateLoadingState(false);
					offlineStatusText.innerText = translations['offline.statusText.ready'];
					break;
			}
		});

		downloadStuffOnSwReady();

		offlineButton.addEventListener('click', async () => {
			if (await isWorkerInstalled()) {
				offlineStatusText.innerText = translations['offline.statusText.removing'];
				updateLoadingState(true);
				await removeOffline();
				updateLoadingState(false);
				offlineStatusText.innerText = translations['offline.statusText.removed'];
				offlineButton.innerText = translations['offline.button.install'];
			} else {
				offlineButton.toggleAttribute('disabled', true);
				offlineStatusText.innerText = translations['offline.statusText.installing'];
				updateLoadingState(true);
				navigator.serviceWorker
					.register('/service-worker.js', {
						scope: '/',
					})
					.then(() => {
						offlineButton.innerText = translations['offline.button.remove'];
						offlineButton.toggleAttribute('disabled', false);
						updateLoadingState(false);
						offlineStatusText.innerText = translations['offline.statusText.installed'];
					});
			}
		});
	}
</script>
