---
import 'simple-vanilla-notifications/defaults.css';
---

<button id="offline-control-button" aria-hidden="true" tabindex="-1">Install offline</button>

<style>
	#offline-control-button {
		opacity: 0;
		pointer-events: none;
		transition: opacity 1s, background-color 150ms, border-color 100ms;
		border: 1px solid transparent;
	}
	#offline-control-button[data-offline-supported] {
		opacity: 1;
		pointer-events: auto;
	}
	/* #offline-control-button.loading::after {
		content: '';
		width: 12px;
		height: 12px;
		background-color: white;
		border: 1px solid var(--theme-accent);
		border-radius: 0 10px 0 10px;
		animation: spin 2s infinite linear;
	}
	@keyframes spin {
		from {
			transform: rotateZ(0deg);
		}
		to {
			transform: rotateZ(360deg);
		}
	} */
	#offline-control-button:not(:disabled) {
		border-color: var(--theme-accent);
	}
	#offline-control-button:hover:not(:disabled) {
		background-color: var(--theme-accent);
	}
	#offline-control-button:disabled {
		color: var(--theme-text-light);
		background-color: var(--theme-dim-light);
	}
</style>

<script>
	import { createNotificationManager } from 'simple-vanilla-notifications';

	async function removeOffline() {
		console.log('Removing offline');

		// Unregister all registered serviceworkers
		const registrations = await navigator.serviceWorker.getRegistrations();

		registrations.forEach((registration) => registration.unregister());

		// Remove all cached assets
		const keys = await caches.keys();
		await Promise.all(
			keys.map((key) => {
				return caches.delete(key);
			})
		);
	}

	function downloadCurrentLanguage(registration: ServiceWorkerRegistration) {
		// Get the current page locale from the path string
		const match = location.pathname.match(/^\/([a-zA-Z]{2}(?:-[a-zA-Z]{2})?)\//);

		// If a locale wasn't found in the path, default to English
		const currentLanguage = match ? match[1] || 'en' : 'en';

		registration.active?.postMessage({
			name: 'download language',
			lang: currentLanguage,
		});
	}

	function downloadStuffOnSwReady() {
		// As soon as the serviceWorker is ready, download all the pages in the current language
		navigator.serviceWorker.ready.then((registration) => {
			// Download the current page
			registration.active?.postMessage({
				name: 'download page',
				path: location.pathname,
			});

			// Download all of the pages in the current language
			downloadCurrentLanguage(registration);
		});
	}

	if (import.meta.env.DEV) removeOffline();
	else if ('serviceWorker' in navigator) {
		// If serviceWorker is availble, we can set up all the stuff to be able to remove it
		const offlineButton = document.getElementById('offline-control-button') as HTMLButtonElement;

		offlineButton.toggleAttribute('data-offline-supported', true);
		offlineButton.setAttribute('aria-hidden', 'false');
		offlineButton.setAttribute('tabindex', '0');

		const { createNotification } = createNotificationManager({
			defaultAnimated: false,
		});

		const shouldRemove = async () => (await navigator.serviceWorker.getRegistrations()).length > 0;

		if (await shouldRemove()) {
			// If the site is already set up to work offline, make the button remove offline support instead
			offlineButton.innerText = 'Remove offline';
		}

		navigator.serviceWorker.addEventListener('controllerchange', downloadStuffOnSwReady);

		downloadStuffOnSwReady();

		offlineButton.addEventListener('click', async () => {
			if (await shouldRemove()) {
				const removingNotif = createNotification('Removing offline support...');
				await removeOffline();
				offlineButton.innerText = 'Install offline';

				removingNotif.dismiss();
				createNotification('Offline support removed.');
			} else {
				console.log('Setting up offline');

				const registeringNotif = createNotification('Setting up offline support...');

				offlineButton.toggleAttribute('disabled', true);

				navigator.serviceWorker
					.register('/service-worker.js', {
						scope: '/',
					})
					.then(() => registeringNotif.dismiss());
			}
		});
	}
</script>
