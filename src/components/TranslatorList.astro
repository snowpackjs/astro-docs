---
import { cachedFetch } from '../util-server';
import { getLanguageFromURL } from '../util';

export interface Props {
	githubRepo?: `${string}/${string}`;
}

interface Commit {
	author: {
		login: string;
		id: number;
	};
	commit: {
		message: string;
	};
}

interface Contributor {
	login: string;
	id: number;
	contributions: number;
}

const { githubRepo = 'withastro/docs' } = Astro.props as Props;
const lang = getLanguageFromURL(Astro.url.pathname);

const printError = (e: Error) =>
	console.warn(`[error]  /src/components/TranslatorList.astro\n         ${e?.message ?? e}`);

async function getCommitsByPath(path: string, repo: string, page = 1): Promise<Commit[]> {
	try {
		const pageSize = 100;
		const url = `https://api.github.com/repos/${repo}/commits?path=${path}&per_page=${pageSize}&page=${page}`;

		const token = import.meta.env.PUBLIC_GITHUB_TOKEN;

		const res = await cachedFetch(
			url,
			{
				method: 'GET',
				headers: {
					Authorization:
						token && `Basic ${Buffer.from(token, 'binary').toString('base64')}`,
					'User-Agent': 'astro-docs/1.0',
				},
			},
			{ duration: '15m' }
		);

		const data = await res.json();

		if (!res.ok) {
			throw new Error(
				`Request to fetch commits failed. Reason: ${res.statusText}
         Message: ${data?.message}`
			);
		}

		// Fetch more commits recursively if there are more than GitHubâ€™s per-page response limit.
		if (data.length === pageSize) {
			const rest = await getCommitsByPath(path, repo, page + 1);
			data.push(...rest);
		}

		return data;
	} catch (e: any) {
		printError(e);
		return new Array();
	}
}

function getTranslationContributors(contributions: Commit[]) {
	const ignoredCommitKeywords = /(en-only|typo|broken link|i18nReady|i18nIgnore)/i;
	const contributors: Contributor[] = [];

	for (const { author, commit } of contributions) {
		if (ignoredCommitKeywords.test(commit.message) || !author) continue;

		const contributorIndex = contributors.findIndex(
			(contributor) => contributor.id === author.id
		);

		if (contributorIndex < 0) {
			contributors.push({
				id: author.id,
				login: author.login,
				contributions: 1,
			});
			continue;
		}

		contributors[contributorIndex].contributions += 1;
	}

	return contributors.sort((a, b) => b.contributions - a.contributions);
}

const pagesContributions = await getCommitsByPath(`src/content/docs/${lang}/`, githubRepo);
const labelsContributions = await getCommitsByPath(`src/i18n/${lang}/`, githubRepo);
const legacyContributions = await getCommitsByPath(`src/pages/${lang}/`, githubRepo);

const allContributions = [...pagesContributions, ...labelsContributions, ...legacyContributions];
const contributors = getTranslationContributors(allContributions);
console.log(contributors);
---

{lang !== "en" && (
	<>
<slot />
<!-- Thanks to @5t3ph for https://smolcss.dev/#smol-avatar-list! -->
<div>
	<ul class="avatar-list">
		{
			contributors.map((item) => (
				<li>
					<a href={`https://github.com/${item.login}`}>
						<img
							alt={item.login}
							title={item.login}
							width="3rem"
							height="3rem"
							src={`https://avatars.githubusercontent.com/u/${item.id}?s=64`}
							loading="lazy"
						/>
					</a>
				</li>
			))
		}
	</ul>
</div>
</>
)}

<style>
	.avatar-list {
		--avatar-size: 3rem;
		--avatar-overlap: -0.125em;
		--avatar-row-spacing: 0.125em;
		--avatar-outline-width: 1px;
		--avatar-outline-offset: 0.08em;

		display: flex;
		flex-wrap: wrap;
		list-style: none;
		padding: var(--avatar-border);
		font-size: var(--avatar-size);
	}

	.avatar-list li {
		--avatar-row-margin: calc(
			var(--avatar-outline-offset) + var(--avatar-outline-width) + var(--avatar-row-spacing) /
				2
		);
		margin: var(--avatar-row-margin) var(--avatar-overlap) var(--avatar-row-margin) 0;
	}

	.avatar-list img,
	.avatar-list a {
		display: block;
		border-radius: 50%;
		width: var(--avatar-size);
		height: var(--avatar-size);
		/* Hide alt/title if Avatar image fails to load. */
		text-decoration: none;
		color: transparent;
	}

	.avatar-list img {
		width: 100%;
		height: 100%;
		object-fit: cover;
		background-color: var(--theme-bg);
		box-shadow: 0 0 0 var(--avatar-outline-width) var(--theme-divider),
			0 0 0 var(--avatar-outline-offset) var(--theme-bg),
			0 0 0 calc(var(--avatar-outline-offset) + var(--avatar-outline-width))
				var(--theme-divider),
			0 0 calc(var(--theme-glow-blur) + var(--avatar-outline-offset))
				var(--theme-glow-diffuse);
		/* Indicates the contributor image boundaries for forced colors users, transparent is changed to a solid color */
		outline: 1px solid transparent;
	}

	.avatar-list a:focus {
		outline: 2px solid var(--theme-accent);
		outline-offset: var(--avatar-outline-offset);
	}
</style>
