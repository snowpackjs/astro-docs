---
import rangeParser from 'parse-numeric-range';
import { escapeHtml, unescapeHtml } from '../util';

const { lang, meta: metaProp, fileName: fileNameProp } = Astro.props;
const meta = metaProp ? unescapeHtml(metaProp) : '';
const isTerminal = ['shellscript', 'shell', 'bash', 'sh', 'zsh'].includes(lang);

// Determine the `fileName` tab title (if any)
const titleMatch = meta.match(/title="(.+)"/);
const metaWithoutTitle = titleMatch?.[0] && meta.replace(titleMatch?.[0], '');
const fileName = titleMatch?.[1] || fileNameProp || null;

// Allow breaking long file paths by inserting a line break opportunity after each slash
const fileNameHtml = fileName ? escapeHtml(fileName).replace(/([\\/])/g, '$1<wbr/>') : null;

// Parse numeric ranges like `{4-5,10}` in the `meta` prop to determine highlighted lines (if any)
const highlightedLines = rangeParser(metaWithoutTitle?.match(/{(.*)}/)?.[1] || '');

// Render the default slot, which contains the syntax-highlighted code in HTML format
// as processed by Astro's Shiki integration
let codeSnippetHtml = await Astro.slots.render('default');

// If we were requested to highlight lines, do it now
if (highlightedLines.length > 0) {
	let lineNumber = 0;
	codeSnippetHtml = codeSnippetHtml.replace(/<span class="line">/g, (match) => {
		lineNumber++;
		const cssClasses = ['line'];
		if (highlightedLines.includes(lineNumber))
			cssClasses.push('highlighted');
		return `<span class="${cssClasses.join(' ')}">`;
	});
}
---
<style lang="scss" is:global>
	.code-snippet {
		--glow-border: 1px solid var(--theme-glow-highlight);
		filter: drop-shadow(0 0 0.3rem var(--theme-glow-diffuse));

		.header, pre {
			border: var(--glow-border);
			border-radius: 0.3rem;
			line-height: 1.65;
		}

		.header {
			display: none;
			border-bottom: none;
			padding: 0.25rem 0.75rem 0.25rem 0.75rem;
			line-height: 1.65;
			z-index: 1;
			position: relative;
			top: 1px;
			background-color: var(--theme-code-tabs);
			color: var(--theme-code-text);
			font-size: 0.85rem;
			font-weight: 500;
			border-bottom-left-radius: 0;
			border-bottom-right-radius: 0;
		}

		pre {
			margin: 0;
			padding: var(--padding-block) 0;
			background-color: var(--theme-code-bg) !important;

			&:focus-visible {
				outline: 3px solid var(--theme-accent);
				outline-offset: -3px;
			}

			& > code {
				all: unset;
				display: inline-block;
				min-width: 100%;

				& > .line {
					display: inline-block;
					min-width: 100%;
					padding-inline-start: 1.25rem;
					padding-inline-end: calc(2 * 1.25rem);
				}

				& > .line.highlighted {
					background: hsla(var(--color-base-purple), 70%, 0.2);
					border-left: 0.25rem solid hsla(var(--color-base-purple), 50%, 1);
					padding-left: calc(1.25rem - 0.25rem) !important;
				}
			}
		}

		&.has-filename {
			& .header {
				display: inline-block;
			}

			& pre {
				border-top-left-radius: 0;
			}
		}

		&.is-terminal {
			--theme-glow-highlight: rgba(255, 255, 255, 0.2);
			--theme-glow-diffuse: rgba(0, 0, 0, 0.4);

			& .header {
				display: block;
				padding-top: 0;
				padding-bottom: 0.1rem;
				color: rgba(255, 255, 255, 0.2);

				&::after {
					content: '● ● ●';
				}
			}

			& pre {
				border-top-left-radius: 0;
				border-top-right-radius: 0;
			}
		}
		
		::selection {
			color: white;
			background-color: var(--theme-code-selection-bg);
		}
	}
</style>
<div class:list={[
	'code-snippet',
	isTerminal && 'is-terminal',
	fileName && 'has-filename',
	`lang-${lang}`
]}>
	<div class="header">{
		fileName && <span class="filename" set:html={fileNameHtml} />
	}</div>
	<Fragment set:html={codeSnippetHtml} />
</div>
