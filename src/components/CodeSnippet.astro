---
import { escapeHtml } from '../util';

const { lang, title, highlightedLines } = Astro.props;

const isTerminal = ['shellscript', 'shell', 'bash', 'sh', 'zsh'].includes(lang);

// Generate HTML code from the title (if any), improving the ability to wrap long file paths
// into multiple lines by inserting a line break opportunity after each slash
const titleHtml = title ? escapeHtml(title).replace(/([\\/])/g, '$1<wbr/>') : null;

// Render the default slot, which contains the syntax-highlighted code in HTML format
// as processed by Astro's Shiki integration
let codeSnippetHtml = await Astro.slots.render('default');

// If we were requested to highlight lines, do it now
if (highlightedLines.length > 0) {
	let lineNumber = 0;
	codeSnippetHtml = codeSnippetHtml.replace(/<span class="line">/g, () => {
		lineNumber++;
		const cssClasses = ['line'];
		if (highlightedLines.includes(lineNumber))
			cssClasses.push('highlighted');
		return `<span class="${cssClasses.join(' ')}">`;
	});
}
---
<style lang="scss" is:global>
	.code-snippet {
		--glow-border: 1px solid var(--theme-glow-highlight);
		filter: drop-shadow(0 0 0.3rem var(--theme-glow-diffuse));

		.header, pre {
			border: var(--glow-border);
			border-radius: 0.3rem;
			line-height: 1.65;
		}

		.header {
			display: none;
			border-bottom: none;
			padding: 0.25rem 1rem 0.25rem 1rem;
			line-height: 1.65;
			z-index: 1;
			position: relative;
			top: 1px;
			background-color: var(--theme-code-tabs);
			color: var(--theme-code-text);
			font-size: 0.9rem;
			font-weight: 500;
			letter-spacing: 0.025ch;
			border-bottom-left-radius: 0;
			border-bottom-right-radius: 0;
		}

		pre {
			margin: 0;
			padding: var(--padding-block) 0;
			background-color: var(--theme-code-bg) !important;

			&:focus-visible {
				outline: 3px solid var(--theme-accent);
				outline-offset: -3px;
			}

			& > code {
				all: unset;
				display: inline-block;
				min-width: 100%;
				--padding-inline: 1.25rem;

				& > .line {
					display: inline-block;
					min-width: 100%;
					padding-inline-start: var(--padding-inline);
					padding-inline-end: calc(2 * var(--padding-inline));
				}

				& > .line.highlighted {
					background: var(--theme-code-highlight-bg);
				}
			}
		}

		&.has-title {
			& .header {
				display: inline-block;
			}

			& pre {
				border-top-left-radius: 0;
			}
		}

		&.is-terminal {
			--theme-glow-highlight: rgba(255, 255, 255, 0.2);
			--theme-glow-diffuse: rgba(0, 0, 0, 0.4);

			& .header {
				display: flex;
				align-items: center;
				justify-content: center;
				padding-bottom: 0.175rem;
				min-height: 1.75rem;
				position: relative;

				&::before {
					content: '●●●';
					display: inline-flex;
					align-items: center;
					position: absolute;
					left: 1rem;
					top: 0;
					bottom: 0.175rem;
					color: rgba(255, 255, 255, 0.15);
					font-family: var(--font-mono);
					font-size: 1.4rem;
					letter-spacing: 0.1ch;
					-webkit-text-size-adjust: none;
				}
			}

			& pre {
				border-top-left-radius: 0;
				border-top-right-radius: 0;
			}
		}
		
		::selection {
			color: white;
			background-color: var(--theme-code-selection-bg);
		}
	}
</style>
<div class:list={[
	'code-snippet',
	isTerminal && 'is-terminal',
	titleHtml && 'has-title',
	`lang-${lang}`
]}>
	<div class="header">{
		titleHtml && <span class="title" set:html={titleHtml} />
	}</div>
	<Fragment set:html={codeSnippetHtml} />
</div>
