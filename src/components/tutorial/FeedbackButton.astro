---
import UIString from '../UIString.astro';

const currentUrl = Astro.url.pathname.replace(/\/$/, '');
---

<button data-feedback-fish data-feedback-fish-url={currentUrl} disabled>
	<UIString key="feedback.button" />
</button>
<script>
	type ElementList = ReturnType<typeof document.querySelectorAll>;

	// Based on https://github.com/withastro/astro/blob/main/packages/astro/src/runtime/client/visible.ts
	const onVisible = <T extends ElementList>(nodes: T, callback: () => void) => {
		const io = new IntersectionObserver((entries) => {
			for (const { isIntersecting } of entries) {
				if (!isIntersecting) continue;
				// As soon as we hydrate, disconnect this IntersectionObserver.
				io.disconnect();
				callback();
				break; // Break loop on first match.
			}
		});
		for (const node of nodes) io.observe(node);
	};

	const buttons = document.querySelectorAll<HTMLButtonElement>('button[data-feedback-fish]');
	onVisible(buttons, () => {
		const script = document.createElement('script');
		script.setAttribute('defer', '');
		script.setAttribute('src', 'https://feedback.fish/ff.js?pid=1b24b5d16c81bd');
		script.onload = () =>
			buttons.forEach((button) => {
				button.disabled = false;
			});
		document.body.append(script);
	});
</script>

<style>
	button {
		border: 1px solid var(--theme-shade-subtle);
		border-radius: 0.5rem;
		background-color: transparent;
		cursor: pointer;
		font-size: var(--theme-text-xs);
		line-height: calc(1 / var(--theme-text-xs));
	}

	button:hover,
	button:focus {
		background-color: var(--theme-divider);
	}

	button:focus:not(:focus-visible) {
		background-color: transparent;
	}
</style>
